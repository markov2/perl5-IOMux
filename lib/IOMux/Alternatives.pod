=chapter NAME

IOMux::Alternatives - compare the IOMux implementation with other Event modules

=chapter DESCRIPTION

On CPAN, you can find various alternatives for this module. Probably, this
is caused by the very low level of programming help that the basic
M<select()> and M<poll()> Operating System calls provide. Various corners
of a program need to register event listeners and later get events back.
This requires some administration.

=section IO::Multiplex

The M<IOMux> module started as a major rework of M<IO::Multiplex>. It
follows the same concept, but with major internal and visible
improvements. Most methods with a name which starts with C<mux_>
originate from C<IO::Multiplex>.

The M<IOMux> implementation is conceptually much closer to
M<IO::Multiplex> (I<Plex>) than you may expect. Similar enough to write
a comparison.

Main differences:

=over 4

=item Event managers
In Plex, all is organized around a C<select> loop.  In Mux, you have
a choice between various mechanisms of which some still need to be
implemented.

=item Callback objects
In Plex, any file-handle I<may> have a callback object associated to
it. If not, some default is used. In IOMux, the callback object has the
focus and has a file-handle associated to it. This should simplify more
complex implementations.

IOMux does not support callbacks to name-spaces, because the object is
used for per-handle administration. In Plex, that administration is
located inside the multiplex main object (and therefore difficult to
extend with higher level applications)

=item Callback routines
The Mux implementation defines the same C<mux_*> methods as Plex, but
has organized them. In Plex, the connection accepting C<mux_connection>
and the input callback C<mux_input> are always available, even though
a callback object probably supports only one of both. In IOMux, there
is a clear distinction between various kinds of handlers.

=item Hooks
In Mux, you have a few more locations where you can hook the process,
a few more callbacks.

=item Pipes and files
Mux added official support for file reading and writing, pipes and more.
Some of those do work in Plex as well, with some tricks.
=back

=section IO::Async / Net::Async

Paul Evans has developed a large number of modules which is more
feature complete than C<IOMux>. It supports far more event loops,
is better tested, and has many higher level applications ready to
be used.

=section AnyEvent

=section POE

=section Final consideration

Certain applications will benefit from M<IOMux> (especially my
personal development projects), because it is based on the M<OODoc>
module for object oriented perl module documentation, and M<Log::Report>
for error handling and translations.

=cut
